#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\begin_preamble
%\usepackage{multicol}

%Farben fuer Programmlisting
\usepackage{listings,xcolor}
\definecolor{pl_background}{rgb}{0.95,0.95,0.95}
\definecolor{pl_comment}{rgb}{0.12, 0.38, 0.18 }
\definecolor{pl_ifelse}{rgb}{0.74,0.74,.29}
\definecolor{pl_keyword}{rgb}{0.37, 0.08, 0.25}
\definecolor{pl_string}{rgb}{0.06, 0.10, 0.98}
% Vordefiniertes Programmlisting
\lstset{
language = Java,
basicstyle = \small\sffamily,
backgroundcolor = \color{pl_background},
stringstyle = \color{pl_string},
keywordstyle = \color{pl_keyword}\bfseries,
commentstyle = \color{pl_comment}\itshape,
frame = lrbt,
numbers = left,
showstringspaces = false,
breaklines = true,
tabsize=4,
xleftmargin = 15pt}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language ngerman
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 3cm
\topmargin 3cm
\rightmargin 3cm
\bottommargin 3cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language german
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\noindent
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
titlepage
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center

\lang german
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="left" valignment="top">
<column alignment="right" valignment="top">
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Hochschule für Technik und Wirtschaft Dresden
\end_layout

\end_inset
</cell>
<cell multirow="3" alignment="right" valignment="middle" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/htw-dresden.png
	lyxscale 25
	width 40text%

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Fakultät Informatik/Mathematik
\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="right" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Computergrafik/Visualisierung II
\begin_inset space \hspace{}
\length 3cm
\end_inset


\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="right" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset VSpace 7cm
\end_inset


\end_layout

\begin_layout Standard
\noindent
\align left

\series bold
\size larger
Schwarmverhalten
\end_layout

\begin_layout Standard
\noindent
\align left

\size larger
\begin_inset VSpace 2.5cm
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="13" columns="3">
<features rotate="0" tabularvalignment="middle">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Submitted by:
\begin_inset space \hspace{}
\length 1cm
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Marilena Fröhlich
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Mathias Gewissen
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Sebastian Mischke
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Supervised by:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Prof.
 Dr.
 Marco Block-Berlitz
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Dresden, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
today
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\noindent
\align left
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Section
Vektor
\end_layout

\begin_layout Standard
Vektoren dienen zur Speicherung von Daten und als Grundlage für Berechnungen.
\end_layout

\begin_layout Subsection
Vektor
\end_layout

\begin_layout Standard
Die Klasse 
\family typewriter
Vektor
\family default
 repräsentiert einen Vektor im mathematischen Sinne.
 Sie besitzt grundlegende Operationen, die auf Vektoren angewendet werden.
 Zusätzlich gibt es die Klassen 
\family typewriter
Vektor2D
\family default
 und 
\family typewriter
Vektor3D
\family default
, welche von Vektor abgeleitet sind und Vektoren für den zwei- bzw.
 dreidimensionalen Raum darstellen
\end_layout

\begin_layout Subsection
LineareAlgebra
\end_layout

\begin_layout Standard
Die Klasse 
\family typewriter
LineareAlgebra
\family default
 beinhaltet mathematische Operationen, die für Vektoren ausgeführt werden.
\end_layout

\begin_layout Section
Objekte
\end_layout

\begin_layout Standard
Im Programm gibt es verschiedene Objekte, die sich im Raum aufhalten und
 aufeinander wirken.
 Hierbei werden unterschiedliche Arten von Objekten unterschieden (siehe
 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Objekte"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/Objekte.png
	lyxscale 25
	width 75col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Objekte
\begin_inset CommandInset label
LatexCommand label
name "fig:Objekte"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
BasisObjekt
\end_layout

\begin_layout Standard
Die Grundlage der Objekte bildet die Klasse BasisObjekt.
 Sie ist 
\family typewriter
\shape italic
\emph on
abstract
\family default
\shape default
\emph default
 und besitzt 
\family typewriter
\shape italic
\emph on
protected
\family default
\shape default
\emph default
 Konstruktoren.
 Es nicht gewollt ist, eine Instanz von ihr zu erzeugen, allerdings soll
 es möglich sein, Subklassen von ihr zu erstellen.
 Die Klasse hat mehrere Attribute - eine ID vom Datentyp 
\family typewriter
\shape italic
\emph on
Integer
\family default
\shape default
\emph default
, eine Position vom Typ
\shape italic
 
\family typewriter
\emph on
Vektor2D
\family default
\shape default
\emph default
 und eine Farbe vom Typ 
\family typewriter
\shape italic
\emph on
Vektor3D
\family default
\shape default
\emph default
 gespeichert.
 Der Konstruktor wird überladen und bekommt als Parameter Farbe und/oder
 Position übergeben.
 Die Zuordnung einer ID erfolgt gesondert im 
\family typewriter
ObjektManager
\family default
 (siehe 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:ObjektManager"

\end_inset

).
 Außerdem beinhaltet die Klasse 
\family typewriter
\shape italic
\emph on
BasisObjekt
\family default
\shape default
\emph default
 die 
\shape italic
\emph on
abstrakte
\shape default
\emph default
 Methode 
\family typewriter
\shape italic
\emph on
render
\family default
\shape default
\emph default
, die zum Anzeigen des Objektes überschrieben wird.
 Des Weiteren enthält sie Funktionen, die für das Erzeugen der Vertices
 und Anzeigen des Objektes aufgerufen werden können.
\end_layout

\begin_layout Subsection
StatischesObjekt und BeweglichesObjekt
\end_layout

\begin_layout Standard
Die Klassen 
\family typewriter
\shape italic
\emph on
StatischesObjekt
\family default
\shape default
\emph default
 und 
\family typewriter
\shape italic
\emph on
BeweglichesObjekt
\family default
\shape default
\emph default
 sind von
\shape italic
 
\family typewriter
\emph on
BasisObjekt
\family default
\shape default
\emph default
 abgeleitet und sind ebenfalls 
\family typewriter
\shape italic
\emph on
abstract
\family default
\shape default
\emph default
.
 
\family typewriter
\shape italic
\emph on
StatischesObjekt
\family default
\shape default
\emph default
 besitzt keine zusätzlichen Funktionen, lediglich Konstruktoren, die die
 Konstruktoren der Superklasse aufrufen.
 Ihre Aufgabe ist es, eine Unterscheidung zwischen sich bewegenden und festen
 Objekten zu ermöglichen.
 
\family typewriter
\shape italic
\emph on
BeweglichesObjekt
\family default
\shape default
\emph default
 enthält mehrere zusätzliche Attribute.
 
\end_layout

\begin_layout Itemize

\family typewriter
speed
\family default
 ist die aktuelle Geschwindigkeit des Objektes
\end_layout

\begin_layout Itemize

\family typewriter
masse
\family default
 dient zur Anwendung des zweiten newtonschen Gesetzes 
\begin_inset Formula $\overrightarrow{F}=m*\overrightarrow{a}$
\end_inset


\end_layout

\begin_layout Itemize

\family typewriter
maxSpeed
\family default
 begrenzt die Geschwindigkeit eines Objektes
\end_layout

\begin_layout Itemize

\family typewriter
behavior
\family default
 ist eine Instanz der Klasse 
\family typewriter
Behavior
\family default
 (siehe 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Behavior"

\end_inset

) und das Verhalten des Objektes beinhaltet
\end_layout

\begin_layout Itemize

\family typewriter
abstand
\family default
 ist ein Array mit den Abständen des Objektes zu allen anderen im 
\family typewriter
ObjektManager
\family default
 (siehe 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:ObjektManager"

\end_inset

) registrierten Objekten
\end_layout

\begin_layout Standard
Zu diesen Attributen beinhaltet die Klasse 
\family typewriter
BeweglichesObjekt
\family default
 die Funktion 
\family typewriter
calculateDistances
\family default
\emph on
, 
\emph default
die das Array 
\family typewriter
abstand
\family default
 mit den neu berechneten Werten befüllt.
 Die Funktion 
\family typewriter
eulerMethod
\family default
 nimmt eine Kraft in Form eines 
\family typewriter
Vektor2D
\family default
 als Übergabeparameter und wendet das explizite Euler-Verfahren auf das
 Objekt an.
\end_layout

\begin_layout Subsection
SchwarmObjekt
\end_layout

\begin_layout Standard

\family typewriter
SchwarmObjekt
\family default
 ist eine von 
\family typewriter
BeweglichesObjekt
\family default
 abgeleitete Klasse und repräsentiert ein Subjekt des Schwarms.
 Die Konstruktoren beinhalten neben dem Aufruf des Superkonstruktors auch
 das Einfügen des Objektes in den 
\family typewriter
ObjektManager
\family default
 (siehe 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:ObjektManager"

\end_inset

).
 Außerdem wird hier das Attribut 
\family typewriter
behavior
\family default
 mit einem Objekt der Klasse 
\family typewriter
SchwarmVerhalten
\family default
 (siehe 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:SchwarmVerhalten"

\end_inset

) initialisiert.
 Für das Anzeigen der 
\family typewriter
SchwarmObjekte
\family default
 wird
\emph on
 
\emph default
die Funktion
\emph on
 
\family typewriter
\emph default
render
\family default
 überschrieben.
 Darin wird zunächst 
\family typewriter
color
\family default
 durch den Aufruf von 
\family typewriter
getSchwarmColor
\family default
 geändert.
 Danach folgt der OpenGL Aufruf mit dem setzen der Farbe der Anzeige auf
 den im Objekt gespeicherten color Wert und anschließendem Ausführen von
 
\family typewriter
drawDynamicTriangle
\family default
, welches ein gleichschenkliges Dreieck erzeugt, das in Richtung des eingegebene
n Geschwindigkeitsvektors ausgerichtet ist.
\end_layout

\begin_layout Subsection
AlphaObjekt
\end_layout

\begin_layout Standard
Auch die Klasse 
\family typewriter
AlphaObjekt
\family default
 wurde von 
\family typewriter
BeweglichesObjekt
\family default
 abgeleitet, jedoch enthält sie, im Unterschied zum 
\family typewriter
SchwarmObjekt
\family default
, neben Konstruktoren und dem überschriebenen 
\family typewriter
render
\family default
 keine zusätzlichen Funktionen.
 Bereits im Konstruktor wird behavior ein neues Objekt von 
\family typewriter
AlphaVerhalten
\family default
 (siehe 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:AlphaVerhalten"

\end_inset

) zugewiesen.
\end_layout

\begin_layout Subsection
HindernisObjekt
\end_layout

\begin_layout Standard
Die Klasse 
\family typewriter
HindernisObjekt
\family default
 wird von 
\family typewriter
StatischesObjekt
\family default
 abgeleitet.
 Sie besitzt neben den Konstruktoren, welche die Konstruktoren der Superklasse
 verwenden, eine überschriebene Funktion 
\family typewriter
render
\family default
.
 In ihr wird die Farbe für die Anzeige auf schwarz gesetzt und ein regelmäßiges
 Achteck durch die Funktion 
\family typewriter
drawOctagon
\family default
 an die Position des Objektes gezeichnet.
\end_layout

\begin_layout Subsection
ObjektManager
\begin_inset CommandInset label
LatexCommand label
name "sub:ObjektManager"

\end_inset


\end_layout

\begin_layout Standard
Die Klasse
\emph on
 
\family typewriter
\emph default
ObjektManager
\family default
 ist als Singleton-Pattern realisiert und dient der Verwaltung der erzeugten
 Objekte.
 Sie beinhaltet drei Arrays, diese speichern jeweils
\emph on
 
\emph default
Instanzen von
\emph on
 
\family typewriter
\emph default
SchwarmObjekt
\family default
, 
\family typewriter
AlphaObjekt
\family default
 und 
\family typewriter
HindernisObjekt
\family default
.
 Zusätzlich gibt es Funktionen für das Hinzufügen und Entfernen von Objekten,
 sowie das Überprüfen, ob ein Objekt bereits im 
\family typewriter
ObjektManager
\family default
 vorhanden ist.
 Außerdem gibt es die Funktionen
\emph on
 
\family typewriter
\emph default
update
\family default
 und
\emph on
 
\family typewriter
\emph default
render
\family default
.
 Diese rufen die
\emph on
 
\family typewriter
\emph default
update
\family default
\emph on
 
\emph default
bzw.
 
\family typewriter
render
\family default
-Funktion einzeln für jedes im 
\family typewriter
ObjektManager
\family default
 befindliche Objekt auf.
\end_layout

\begin_layout Section
Verhalten
\end_layout

\begin_layout Standard
Verhalten ist die Art, wie sich ein bewegliches Objekt im Raum bewegt und
 auf andere Objekte reagiert.
\end_layout

\begin_layout Subsection
Behavior
\begin_inset CommandInset label
LatexCommand label
name "sub:Behavior"

\end_inset


\end_layout

\begin_layout Standard

\family typewriter
Behavior
\family default
 ist ein Interface, welches die Funktion
\emph on
 
\family typewriter
\emph default
update
\family default
 bereitstellt.
 Damit wird sichergestellt, dass in den Klassen, die 
\family typewriter
Behavior
\family default
 implementieren, die Funktion 
\family typewriter
update
\family default
 aufgerufen werden kann.
\end_layout

\begin_layout Subsection
BasisVerhalten
\end_layout

\begin_layout Standard
Die Klasse 
\family typewriter
BasisVerhalten
\family default
 ist eine abstrakte Klasse, die 
\family typewriter
Behavior
\family default
 implementiert.
 Zudem besitzt sie als Attribut ein Objekt der Klasse 
\family typewriter
BeweglichesObjekt
\family default
\emph on
 
\emph default
und die folgenden Funktionen.
\end_layout

\begin_layout Subsubsection
Kohäsion
\begin_inset CommandInset label
LatexCommand label
name "sub:Kohäsion"

\end_inset


\end_layout

\begin_layout Standard
Jedes bewegliche Objekt hat ein festgelegtes Umfeld.
 Alle beweglichen Objekte, die sich in diesem Umfeld befinden, nehmen Einfluss
 auf das Objekt.
 Die Größe des Feldes wird dem Verhalten als Parameter übergeben.
 Für die Berechnung der Kohäsion wird für jedes im 
\family typewriter
ObjektManager
\family default
 befindliche 
\family typewriter
SchwarmObjekt
\family default
 überprüft, welche beweglichen Objekte sich innerhalb des Umfeldes befinden.
 Für diese Objekte wird anschließend die durchschnittliche Position berechnet.
 Die Differenz aus berechnetem Mittelwert und der Position des im Verhalten
 gespeicherten Objektes liefert die Kohäsion.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public Vektor getCohesion(double abstand) {
\end_layout

\begin_layout Plain Layout

	Vektor2D average = new Vektor2D();
\end_layout

\begin_layout Plain Layout

	int count = 0;
\end_layout

\begin_layout Plain Layout

	for (int i = 0; i < om.getObjectCount(); i++) {
\end_layout

\begin_layout Plain Layout

		if (obj.abstand[i] < abstand) {
\end_layout

\begin_layout Plain Layout

			average.add(om.getObject(i).pos);
\end_layout

\begin_layout Plain Layout

			count++;
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	return count == 0 ? average : average.div(count).sub(obj.pos);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Separation
\end_layout

\begin_layout Standard
Wie bei der Kohäsion nehmen nur bewegliche Objekte in einem bestimmten Umkreis
 eines Objektes Einfluss auf das Objekt.
 Von diesen Objekten wird der durchschnittliche Abstand zum Ausgangsobjekt
 berechnet.
 Dabei wird der Abstand vorher durch das Quadrat seiner Länge geteilt.
 Die Differenz aus berechnetem Mittelwert und der Position des im Verhalten
 gespeicherten Objektes liefert die Separation.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public Vektor2D getSeparation(double abstand) {
\end_layout

\begin_layout Plain Layout

	Vektor2D result = new Vektor2D();
\end_layout

\begin_layout Plain Layout

	for (int i = 0; i < om.getObjectCount(); i++) {
\end_layout

\begin_layout Plain Layout

		if (obj.id != i) {
\end_layout

\begin_layout Plain Layout

			Vektor2D dif = (Vektor2D) LineareAlgebra.sub(obj.pos, om.getObject(i).pos);
\end_layout

\begin_layout Plain Layout

			if ((obj.abstand[i] < abstand) && (obj.abstand[i] > 0)) {
\end_layout

\begin_layout Plain Layout

				result.add(dif.div(obj.abstand[i] * obj.abstand[i]));
\end_layout

\begin_layout Plain Layout

			}
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	return result;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Alignment
\end_layout

\begin_layout Standard
Für die Berechnung des Alignments wird die Durchschnittsgeschwindigkeit
 aller beweglichen Objekte, die sich in oben genanntem Umfeld (siehe 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Kohäsion"

\end_inset

) des Ausgangsobjektes befinden, berechnet.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public Vektor2D getAlignment(double abstand) {
\end_layout

\begin_layout Plain Layout

	Vektor2D average = new Vektor2D();
\end_layout

\begin_layout Plain Layout

	int count = 0;
\end_layout

\begin_layout Plain Layout

	for (int i = 0; i < om.getObjectCount(); i++) {
\end_layout

\begin_layout Plain Layout

		if (obj.abstand[i] < abstand) {
\end_layout

\begin_layout Plain Layout

			average.add(om.getObject(i).speed);
\end_layout

\begin_layout Plain Layout

			count++;
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	return count == 0 ? average : (Vektor2D) average.div(count);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Hindernisse-Separation
\end_layout

\begin_layout Standard
Die Hindernisse-Separation funktioniert wie die Separation.
 Allerdings werden zur Berechnung nur die statischen, nicht aber die beweglichen
 Objekte mit einbezogen.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public Vektor2D getObstacleSeparation(double abstand) {
\end_layout

\begin_layout Plain Layout

	Vektor2D result = new Vektor2D();
\end_layout

\begin_layout Plain Layout

	double diflength;
\end_layout

\begin_layout Plain Layout

	for (int i = 0; i < om.getObstacleCount(); i++) {
\end_layout

\begin_layout Plain Layout

		Vektor2D dif = (Vektor2D) LineareAlgebra.sub(obj.pos, om.getObstacle(i).pos);
\end_layout

\begin_layout Plain Layout

		if (((diflength = dif.lengthsquare()) < abstand * abstand) && (diflength
 > 0)) {
\end_layout

\begin_layout Plain Layout

			result.add(dif.div(diflength));
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	return result;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Alpha-Kohäsion
\end_layout

\begin_layout Standard
Die Alpha-Kohäsion funktioniert wie die Kohäsion.
 Allerdings werden zur Berechnung nur
\emph on
 
\family typewriter
\emph default
AlphaObjekte
\family default
 mit einbezogen.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public Vektor2D getAlphaCohesion(double abstand) {
\end_layout

\begin_layout Plain Layout

	Vektor2D result = new Vektor2D();
\end_layout

\begin_layout Plain Layout

	for (int i = 0; i < om.getAlphaCount(); i++) {
\end_layout

\begin_layout Plain Layout

		if (LineareAlgebra.manhattanDistance(obj.pos, om.getAlpha(i).pos) < abstand)
 {
\end_layout

\begin_layout Plain Layout

			result.add(LineareAlgebra.sub(om.getAlpha(i).pos, obj.pos));
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	return result;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
SchwarmVerhalten
\begin_inset CommandInset label
LatexCommand label
name "sub:SchwarmVerhalten"

\end_inset


\end_layout

\begin_layout Standard
Die Klasse 
\family typewriter
Schwarmverhalten
\family default
 besitzt die Funktion 
\family typewriter
getForce
\family default
, die die Kräfte von 
\family typewriter
getCohesion
\family default
, 
\family typewriter
getSeparation
\family default
, 
\family typewriter
getAlignment
\family default
, 
\family typewriter
getObstacleSeparation
\family default
 und 
\family typewriter
getAlphaCohesion
\family default
 aufaddiert und zurückgibt.
 Damit berechnet sie die Gesamtkraft die auf das Objekt wirken soll.
 Die Funktion 
\family typewriter
update
\family default
 schreibt zuerst die Abstände zwischen dem Ausgangsobjekt und allen anderen
 beweglichen Objekten im 
\family typewriter
ObjektManager
\family default
\emph on
 
\emph default
in das Array 
\family typewriter
abstand
\family default
\emph on
.
 
\emph default
Anschließend wird das explizite Euler-Verfahren auf die berechnete Gesamtkraft
 ausgefüht
\emph on
.
\end_layout

\begin_layout Subsection
AlphaVerhalten
\begin_inset CommandInset label
LatexCommand label
name "sub:AlphaVerhalten"

\end_inset


\end_layout

\begin_layout Standard
Die Klasse 
\family typewriter
Alphaverhalten
\family default
 verhält sich ähnlich wie das 
\family typewriter
Schwarmverhalten
\family default
.
 Allerdings addiert 
\family typewriter
getForce
\family default
 hier lediglich die Kräfte von 
\family typewriter
getSeparation
\family default
 und 
\family typewriter
getObstacleSeparation
\family default
.
\end_layout

\begin_layout Section
Anzeige
\end_layout

\begin_layout Standard
Die Anzeige ist verantwortlich für die Darstellung des Schwarmverhaltens.
\end_layout

\begin_layout Subsection
BasisFenster
\end_layout

\begin_layout Standard
Die Klasse
\emph on
 
\family typewriter
\emph default
BasisFenster
\family default
 ist 
\family typewriter
abstract
\family default
 und bildet die Grundlage für die grafische Ausgabe der Objekte.
 Sie besitzt eine Breite, eine Höhe und den Titel des Fensters als Attribute.
 Als Methoden beinhaltet sie die Initialisierung eines LWJGL Displays (siehe
 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Display"

\end_inset

) und das Starten des Renderloops.
\end_layout

\begin_layout Subsection
WeltDesSchwarms
\end_layout

\begin_layout Standard
Die Klasse 
\family typewriter
WeltDesSchwarms
\family default
 wird von 
\family typewriter
BasisFenster
\family default
 abgeleitet und ist Startklasse des Projektes.
 Bei der Ausführung werden vorab zunächst sämtliche für den Programmablauf
 relevanten Objekte erstellt.
 Im Anschluss wird das Display erzeugt und der 
\family typewriter
renderLoop
\family default
 gestartet.
 Die Funktion 
\family typewriter
renderLoop
\family default
 löscht erst den Inhalt des Displays, erzeugt dann ein Shaderprogram in
 der Klasse Shader (siehe 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Shader"

\end_inset

), führt anschließend die Funktionen 
\family typewriter
update
\family default
 und 
\family typewriter
render
\family default
 des 
\family typewriter
ObjektManagers
\family default
 aus und löscht schließlich den erzeugten Shader.
 Dieser Ablauf wird wiederholt, solange keine Schließanfrage für das Display
 aufgetreten ist.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Subsection
Shader
\begin_inset CommandInset label
LatexCommand label
name "sub:Shader"

\end_inset


\end_layout

\begin_layout Standard
Die Klasse 
\family typewriter
Shader
\family default
 dient dazu, die Berechnung der Anzeige der Objekte auf der Grafikkarte
 vorzunehmen.
 Dafür wird bei der Erstellung des Shaderprogramms ein Vertex- und ein Fragments
hader erzeugt.
 Deren Shadercode wir aus einer externen Datei geladen, um anschließend
 die beiden Shader mit dem Shaderprogramm zu linken.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public void createShaderProgram() {
\end_layout

\begin_layout Plain Layout

	shaderProgramm = glCreateProgram();
\end_layout

\begin_layout Plain Layout

	vertexShader = glCreateShader(GL_VERTEX_SHADER);
\end_layout

\begin_layout Plain Layout

	fragmentShader = glCreateShader(GL_FRAGMENT_SHADER);
\end_layout

\begin_layout Plain Layout

	attachShader("src/verhalten/anzeige.vshader", vertexShader);
\end_layout

\begin_layout Plain Layout

	attachShader("src/verhalten/anzeige.fshader", fragmentShader);
\end_layout

\begin_layout Plain Layout

	glLinkProgram(shaderProgramm);
\end_layout

\begin_layout Plain Layout

	glValidateProgram(shaderProgramm);
\end_layout

\begin_layout Plain Layout

	glUseProgram(shaderProgramm);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/display.png
	lyxscale 25
	width 75col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Display
\begin_inset CommandInset label
LatexCommand label
name "fig:Display"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_body
\end_document
