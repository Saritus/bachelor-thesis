#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble
%\usepackage{multicol}

%Farben fuer Programmlisting
\usepackage{listings,xcolor}
\definecolor{pl_background}{rgb}{0.95,0.95,0.95}
\definecolor{pl_comment}{rgb}{0.12, 0.38, 0.18 }
\definecolor{pl_ifelse}{rgb}{0.74,0.74,.29}
\definecolor{pl_keyword}{rgb}{0.37, 0.08, 0.25}
\definecolor{pl_string}{rgb}{0.06, 0.10, 0.98}
% Vordefiniertes Programmlisting
\lstset{
language = Python,
basicstyle = \footnotesize,
backgroundcolor = \color{pl_background},
stringstyle = \color{pl_string},
keywordstyle = \color{pl_keyword}\bfseries,
commentstyle = \color{pl_comment}\itshape,
frame = lrbt,
numbers = left,
showstringspaces = false,
breaklines = true,
tabsize=4,
xleftmargin = 15pt}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language ngerman
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement h
\paperfontsize 12
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 3cm
\topmargin 3cm
\rightmargin 3cm
\bottommargin 3cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language german
\papercolumns 2
\papersides 1
\paperpagestyle default
\listings_params "breaklines=true,captionpos=b,frame={tb  //--> frame at the top and at the bottom of the listing},language=Python,basicstyle={\footnotesize}"
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\noindent
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{titlepage}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="left" valignment="top">
<row>
<cell multirow="3" alignment="center" valignment="middle" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename img/htw-logo.png
	lyxscale 25
	height 1.5cm

\end_inset


\begin_inset space \hspace{}
\length 0.5cm
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Hochschule für Technik und Wirtschaft Dresden
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size larger
Fakultät Informatik/Mathematik
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell multicolumn="1" alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename img/nwt-logo2.png
	height 1.5cm

\end_inset


\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset VSpace 2cm
\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center

\series bold
\size huge
Projektbericht
\end_layout

\begin_layout Standard
\noindent
\begin_inset VSpace 1cm
\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center

\series bold
\size larger
Thema:
\end_layout

\begin_layout Standard
\noindent
\begin_inset VSpace 0.5cm
\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center

\series bold
\size larger
Erstellen eines anpassbaren Systems zur Erzeugung von neuronalen Netzen
 für die Erkennung vordefinierter Merkmale in Satellitenbildern
\end_layout

\begin_layout Standard
\noindent
\begin_inset VSpace 1cm
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="12" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Vorgelegt von:
\begin_inset space \hspace{}
\length 1cm
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Sebastian Mischke
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Dorfstraße 8, 01257 Dresden
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
geb.
 am 09.11.1995 in Dresden
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Matrikelnummer: 37612
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Studiengang:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Medieninformatik
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Betreuender Prüfer:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Prof.
 Dr.
 Marco Block-Berlitz
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
HTW Dresden
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Externer Betreuer:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ann-Christin Storms
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
New Web Technology GmbH
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{titlepage}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
onecolumn
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
twocolumn
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
**Einleitung
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Zeitraum
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Vom 01.03.
 bis 31.05.2017
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Unternehmen, Standort
\end_layout

\end_inset


\end_layout

\begin_layout Standard
New Web Technology GmbH in Langenfeld
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Abteilung
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Tätigkeitsbereich
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Sehr knapp Aufgaben aufzählen
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Warum dieses Unternehmen?
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Wie bist du auf dieses Unternehmen gekommen?
\end_layout

\end_inset


\end_layout

\begin_layout Section
*Problemstellung
\end_layout

\begin_layout Standard
Die Kernaufgabe des Projektes war es, ein System zu entwickeln, welches
 neuronale Netze erstellt und trainiert.
 Bei den Eingabedaten des Netzes soll es sich um Satelittenbilder von Häusern
 handeln.
 Basierend auf diesen Bildern soll das Netz dann Merkmale des Hauses erkennen
 können.
 Von welchen Häusern das Netz die Merkmale erkennen soll, soll in Form einer
 Adressliste vorgegeben werden.
\end_layout

\begin_layout Standard
Bei der Erstellung des Systems soll besonders darauf geachtet werden, dass
 die einzelnen Komponenten leicht angepasst werden können.
 Da die zu klassifizierenden Häuser über eine Liste in das System gegeben
 werden, ist ein hinzufügen und entfernen eben dieser bereits möglich, allerding
s sollen auch die Informationen, die zu den Häusern gehören, verändert werden
 können.
 Die gewünschten Merkmale, die das System erkennen soll, müssen ohne Probleme
 in ihrer Form veränderbar sein.
 Die Netzstruktur soll anpassbar sein, sich in seiner Ein- und Ausgabeschicht
 aber automatisch an das Format der Ein- und Ausgabedaten anpassen, um den
 Anpassungsaufwand zu reduzieren.
 Außerdem soll es verschiedene Ergebnisvisualisierungen geben, welche je
 nach Merkmalsart zu- und abgeschaltet werden können.
\end_layout

\begin_layout Standard
Das System soll vollständig implementiert werden und als Grundlage für eine
 spätere Anwendung nutzbar sein.
 Das Implementieren eines Interfaces, mit dem ein Nutzer mit dem System
 interagieren kann, soll keine Rolle spielen.
\end_layout

\begin_layout Section
Projektumsetzung
\end_layout

\begin_layout Subsection
Programmiersprache
\end_layout

\begin_layout Standard
Eine fundamentale Entscheidungen vor dem Beginn eines Softwareprojektes
 ist die Wahl einer geeigneten Programmiersprache.
 Dafür waren zwei Kernpunkte zu betrachten.
 Zum einen sollte eine Sprache Verwendung finden, die bereits firmenintern
 genutzt wird, um die neue Software reibungslos in das bestehende Firmensystem
 einzufügen.
 Zum anderen muss die Sprache für die Programmierung von Deeplearning-Anwendunge
n nutzbar sein.
 Ein zusätzlicher Pluspunkt wäre es, wenn bereits Erfahrung mit der zu verwenden
den Sprache vorliegt, da so die Einarbeitungszeit verkürzt würde.
 Unter Betrachtung dieser Punkte fiel die Wahl letztendlich auf die Programmiers
prache 
\begin_inset Quotes gld
\end_inset

Python
\begin_inset Quotes grd
\end_inset

.
\end_layout

\begin_layout Subsection
Adressdatei laden
\end_layout

\begin_layout Standard
Die Adressliste liegt in Form einer CSV-Datei vor und beinhaltet neben einer
 Haus-ID, welche firmenintern für die eindeutige Zuordnung der Häuser verwendet
 wird, noch die Adresse mit Straße, Hausnummer, Postleitzahl und Stadt,
 sowie die geographischen Koordinaten mit Längen- und Breitengrad.
 Zuerst ist die Funktionalität notwendig, CSV-Datei einzulesen und in ein
 Python-internes Format umzuwandeln, damit die darin enthaltenen Informationen
 im System verwendet werden können.
 Dazu wurde eine eigenständige Klasse implementiert, die sowohl CSV-Dateien
 lesen, als auch zweidimensionale Arrays in eine CSV-Datei schreiben kann.
\end_layout

\begin_layout Subsection
Visualisierung der Daten
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Visualisierung von 2D-Karten-Daten
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Um einen besseren Überblick über die vorliegende Adressliste zu bekommen,
 sollte diese ähnlich einer 2D-Karte visualisiert werden.
 Hierzu wurden für jeden Eintrag die geographischen Koordinaten aus der
 Adressliste ausgelesen und separat in einer zweiten Liste gespeichert.
 Diese zweite Liste wird anschließend genutzt, um mit der Python-Visualisierungs
-Bibliothek 
\begin_inset Quotes gld
\end_inset

matplotlib
\begin_inset Quotes grd
\end_inset

 ein Streudiagramm zu erstellen.
\end_layout

\begin_layout Subsection
Deeplearning Framework
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Suchen eines Deeplearning-Frameworks
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Da der Aufwand zur Erstellung eines eigenen Deeplearning-Frameworks zu hoch
 ist, soll ein bereits existierendes Framework verwendet werden.
 Deshalb wurde zuerst eine Liste von möglichen Frameworks sowie deren Vor-
 und Nachteile zusammengestellt.
 Nach anschließendem Abgleich mit den gegebenen Anforderungen, fiel die
 Wahl auf das Framework „Keras”.
\end_layout

\begin_layout Subsection
Einarbeitung in Keras
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Erste Keras-Versuche
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Um Erfahrung mit der Verwendung von 
\begin_inset Quotes gld
\end_inset

Keras
\begin_inset Quotes grd
\end_inset

 zu sammeln, wurde für die Einarbeitung zunächst mit der Erstellung eines
 einfachen neuronalen Netzes begonnen.
 Dieses sollte anhand der geographischen Koordinaten die Postleitzahl eines
 Hauses erkennen.
 Die dafür benötigten Informationen gingen aus der Adressliste hervor.
\end_layout

\begin_layout Standard
Nach dem Training des Netzes wurde der komplette Eingabedatensatz vom Netz
 klassifiziert und die Ergebnisse zusammen mit den Eingabedaten in einer
 neuen Liste gespeichert.
 Die Visualisierung dieser Liste geschah anschließend wieder als Streudiagramm.
 Die Klassifizierungsergebnisse wurden dabei jeweils verschiedenen Farbwert
 zugeordnet.
\end_layout

\begin_layout Subsection
Satellitenbilder laden
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Bilder laden von Google Maps
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Es ist nicht immer möglich, auf einen vollständigen Bilddatensatz von Häusern
 zugreifen zu können.
 Deshalb sollte eine eigene Lösung entwickelt werden, um das benötigte Bildmater
ial zu erzeugen.
 Hierfür wurden verschiedene Online-Kartendienste miteinander verglichen,
 die Entscheidung fiel auf Google Maps.
 Nach der Einarbeitung in die API von Google Maps, erfolgte die Implementierung
 einer Funktion, mit deren Hilfe die benötigten Informationen korrekt einsetzt
 werden können.
 Die Funktion für jeden Eintrag der Adressliste ausgeführt um die geladenen
 Bilder für die spätere Verwendung lokal zu speichern.
\end_layout

\begin_layout Subsection
Neuronales Netz
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Neuronales Netz mit Bild- und Meta-Input
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Neben dem Satellitenbild können zu Häusern noch zusätzliche Meta-Daten existiere
n.
 Diese bieten die Möglichkeit der Verbesserung der Ergebnisgenauigkeit des
 Netzes.
 Deshalb muss die Netzstruktur besonders an das Eingabeformat der Daten
 angepasst werden.
 Dazu wird das Netz aus mehreren Teilnetzen zusammengesetzt.
 Dies ermöglicht mehrere Eingabeschichten und damit die Nutzung verschiedener
 Eingabeformate.
 Das erste Teilnetz soll die Bilddaten analysieren, weshalb es die typischen
 Struktur eines Convolutional Neural Network, bestehend aus Faltungsschichten
 am Anfang und vollvernetzte Schichten am Ende, erhält.
 Das zweite Teilnetz soll die Meta-Daten analysieren und besteht somit ausschlie
ßlich aus vollvernetzte Schichten.
 Das abschließende Teilnetz soll die beiden Eingabe-Netze verbinden und
 basierend auf deren Ergebnissen die Ausgabeschicht berechnen.
\end_layout

\begin_layout Subsection
Trainingsprozess
\end_layout

\begin_layout Standard
Um den Ablauf des Trainingsprozesses des Netzes besser analysieren zu können,
 ist eine Visualisierungen der Trainingsstatistiken, wie zum Beispiel die
 Klassifizierungsgenauigkeit, notwendig.
 Dafür werden die benötigten Informationen bereits während des Trainingsprozesse
s gespeichert.
 Im Anschluss daran werden alle auf diese Weise erfassten Daten in eine
 eigens dafür angefertigte Funktion gegeben, welche daraus abermals mit
 Hilfe von matplotlib ein Kurvendiagramm über die Trainingsepochen erstellt.
\end_layout

\begin_layout Subsection
Speichern und Laden von trainierten Netzen
\end_layout

\begin_layout Standard
Der Trainingsvorgang eines neuronalen Netzes ist sehr zeitaufwändig.
 Um also trainierte Netze zu verwenden oder einen Trainingsprozess unterbrechen
 und fortsetzen zu können, muss das Speichern und Laden eines Netzes möglich
 sein.
 Dafür werden die Struktur des Netzes und die Gewichte aller Schichten in
 zwei separaten Dateien gespeichert.
 Dies ermöglicht es, ein vollständiges trainiertes Netz zu laden, aber auch,
 eine Netzstruktur für einen anderen Trainingsprozess wiederzuverwenden.
\end_layout

\begin_layout Subsection
Anpassen der Bilddaten
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Anpassen der Bilddaten nach Bedarf vor dem Trainingsprozess
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Die vorliegenden Bilddaten entsprechen nicht immer den Anforderungen des
 Trainingsprozesses.
 Deshalb soll es möglich sein, die Bilder vor Beginn des Trainingsprozesses
 zu bearbeiten.
 Dazu wurde eine Funktion erstellt, welche ein lokal vorliegendes Bild lädt
 und nach besonderen Parametern editiert.
 So kann ein Bild skaliert, beschnitten oder in seinem Seitenverhältnis
 geändert werden.
 Das Speichern des Ergebnisbildes zur Wiederverwendung ist möglich, aber
 sehr speicheraufwändig, da aus jeder Parameterkombination ein neues Bild
 hervorgeht.
 Darum wird das Ergebnisbild direkt in den Trainingsprozess gegeben, wodurch
 ein langfristiges Speichern nicht notwendig ist.
\end_layout

\begin_layout Subsection
Erzeugen von Trainingsvorgaben
\end_layout

\begin_layout Standard
Innerhalb der Trainingsdaten müssen die gewünschten Merkmale für jedes Haus
 als Trainingsvorgabe vorliegen.
 Sollte es sich dabei um Merkmale handeln, zu denen noch keine Trainingsvorgaben
 vorliegen, müssen diese händisch erzeugt werden.
 Dafür wurde eine eigenständige Anwendung entwickelt, welche dem Nutzer
 das Erzeugen der Trainingsvorgaben erleichtert.
 Um bereits implementierte Funktionen wiederverwenden zu können, wurde die
 Anwendung in Python mit dem GUI-Toolkit 
\begin_inset Quotes gld
\end_inset

Tk
\begin_inset Quotes grd
\end_inset

 umgesetzt.
\end_layout

\begin_layout Standard
In der Anwendung wird ein Satellitenbild, sowie eine Liste von möglichen
 Merkmalen angezeigt.
 Der Nutzer kann die Merkmale auswählen, die für das gesamte Bild beziehungsweis
e das gezeigte Haus im Bild zutreffen.
 Diese Zuordnung wird dann in einer CSV-Datei gespeichert.
 Ist der Nutzer mit der Merkmalszuordnung für ein Bild fertig, wird der
 nächste Adresslisteneintrag gezeigt.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/data-generator-v4.png
	lyxscale 50
	width 90col%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Interface"

\end_inset

Interface
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
GPS-Koordinaten oder Adressen als Positionseingabe
\end_layout

\begin_layout Standard
Da es von Vorteil wäre, wenn die Liste von Häusern nicht zwingend deren
 geographischen Koordinaten enthalten muss, soll es nun noch zusätzlich
 die Möglichkeit geben, stattdessen die Adressen der Häuser zu benutzen.
 Dafür müssen die Adresstücke, welche in der Adressliste in Straße, Hausnummer,
 Postleitzahl und Stadt aufgeteilt sind, zusammengesetzt und in ein Format
 gebracht werden, welches von der Google Maps API genutzt werden kann.
 Dadurch können alle folgenden Schritte unabhängig von der Art der Positionsanga
be wie bisher erfolgen.
\end_layout

\begin_layout Standard
Sollten sich in der Adressliste sowohl Koordinaten als auch die Adresse
 der Häuser befinden, so kann der Funktion, welche die Bilder herunterlädt,
 die zu benutzende Positionsangabe als Parameter übergeben werden.
\end_layout

\begin_layout Subsection
Zusammenfügen von Bildern
\end_layout

\begin_layout Standard
Teilweise besteht der Bilddatensatz aus Bildern, die nur eine kleine Fläche
 abdecken.
 Dies könnte bei der Analyse von größeren Häusern oder Grundstücken ein
 Problem darstellen.
 Außerdem erhält das Netz in diesem Fall keine Informationen über die nähere
 Umgebung, wodurch Ungenauigkeiten hinsichtlich der Klassifizierungsquote
 zustande kommen können.
 Deshalb wurde eine Funktion implementiert, welche Satellitenbilder zusammensetz
t, um damit ein Bild zu erzeugen, welches eine größere Oberfläche zeigt.
 Das Ursprungsbild, welches direkt die Hausadresse oder -koordinate beinhaltet,
 befindet sich dabei im Zentrum, damit das zu betrachtende Haus immer mittig
 im Ergebnisbild liegt.
\end_layout

\begin_layout Subsection
Speichern und Laden von Trainingsdaten in SQL
\end_layout

\begin_layout Standard
Da sich das Speichern von Adresslisten inklusive der zugehörigen Meta-Daten
 als CSV-Datei langfristig betrachtet als unpraktisch erweisen könnte, sollen
 die benötigten Informationen aus einer SQL-Datenbank geladen werden.
 Dafür wurde eine Klasse erstellt, welche SQL-Tabellen und CSV-Dateien ineinande
r konvertieren kann.
 Somit bleibt die Option bestehen, CSV-Dateien weiterhin als Dateneingabe
 für das Netz zu verwenden.
\end_layout

\begin_layout Standard
Zudem können die Klassifizierungsergebnisse des Netzes, welche bisher ebenfalls
 in Form einer CSV-Datei erzeugt wurden, in der Datenbank gespeichert werden.
 Wird die Arbeit mit mehrerer Computern gleichzeitig durchgeführt, können
 so verschiedene Bilder parallel klassifiziert und in der Datenbank zusammengefü
hrt werden.
\end_layout

\begin_layout Section
**Fazit
\end_layout

\begin_layout Itemize
Was hat dir an deinem Praktikum besonders gut gefallen? Was hat dich an
 der Arbeit vielleicht sogar überrascht?
\end_layout

\begin_layout Itemize
Was könnte in Zukunft an diesem Praktikum (z.
 B.
 am Ablauf, an der Betreuung, an der Organisation) noch verbessert werden?
\end_layout

\begin_layout Itemize
Was hast du während des Praktikums neu gelernt und was wusstest du schon?
\end_layout

\begin_layout Itemize
War die Arbeit eher anspruchsvoll für dich oder hast du dich oft gelangweilt?
\end_layout

\begin_layout Itemize
Welche Stärken und Schwächen konntest du an dir selbst entdecken?
\end_layout

\begin_layout Itemize
Welche Auswirkungen hat das Praktikum auf deine spätere Berufs- oder Studienwahl
?
\end_layout

\begin_layout Itemize
Welche Chancen siehst du für dich persönlich und im Allgemeinen in diesem
 Berufsfeld?
\end_layout

\begin_layout Itemize
Wo kannst du deine neu gewonnen Interessen in Zukunft eventuell noch weiter
 vertiefen?
\end_layout

\begin_layout Itemize
Würdest du das Praktikum weiterempfehlen und wenn ja, an was für eine Person
 mit welchen Eigenschaften?
\end_layout

\begin_layout Itemize
Inwieweit decken sich deine Erfahrungen mit dem, was du vor Beginn des Praktikum
s erwartet oder erhofft hast?
\end_layout

\end_body
\end_document
